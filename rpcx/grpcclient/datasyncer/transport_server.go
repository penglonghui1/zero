// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package datasyncer

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	stdproto "github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/any"
	"github.com/pengcainiao/zero/rpcx/grpcbase"
	pb "github.com/pengcainiao/zero/rpcx/protos"
)

func makeJoinedTasksEndpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.(JoinedTasksRequest)
		v := svc.JoinedTasks(ctx, req)
		return v, nil
	}
}
func decodeJoinedTasksRequest(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(*pb.JoinedTasksRequest)
	var xpaging *Paging
	if r.Paging != nil {
		xpaging = &Paging{
			PageNumber: r.Paging.PageNumber,
			PageRecord: r.Paging.PageRecord,
		}
	}
	var xcontext *UserContext
	if r.Context != nil {
		xcontext = &UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}

	return JoinedTasksRequest{
		Keyword: r.Keyword,
		Paging:  xpaging,
		Context: xcontext,
		Type:    r.Type,
	}, nil
}

func encodeJoinedTasksResponse(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	//在所有类型中匹配名称相同的消息名称
	resp := r.Data.(JoinedTasksResponse)
	pbresp := &pb.JoinedTasksResponse{
		RefID: resp.RefID,
	}
	b, err := stdproto.Marshal(pbresp)
	if err != nil {
		return nil, err
	}
	anyData := &any.Any{
		Value:   b,
		TypeUrl: stdproto.MessageName(pbresp),
	}
	return &pb.Response{
		Message: r.Message,
		Total:   int32(r.Total),
		Data:    anyData,
	}, nil
}
