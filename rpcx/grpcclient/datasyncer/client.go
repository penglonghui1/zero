// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//
package datasyncer

import (
	"context"
	"github.com/pengcainiao/zero/rpcx/grpcbase"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
	"log"
)

//GrpcClient grpc客户端，各服务无需重复开发客户端。
// 如果对response有特殊处理，请在该文件夹下新增 response.go 处理后续逻辑
type GrpcClient struct {
	client Repository
}

//NewClient datasyncer GRPC客户端实例
func NewClient() GrpcClient {
	c, err := grpcbase.DialClient(grpcbase.ServerAddr(grpcbase.DataSyncerSVC))
	if err != nil {
		log.Fatal(err)
	}
	client := c.(Repository)
	return GrpcClient{client}
}

// HandleJoinedTasks 客户端处理逻辑
func (c *GrpcClient) HandleJoinedTasks(ctx context.Context, req JoinedTasksRequest) *JoinedTasksResponse {
	if req.Context == nil {
		panic("grpc context is nil and requestID must be set")
	}
	ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client", "/pb.datasyncer/JoinedTasks", req.Context.RequestID)
	defer span.End()

	span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
	span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
	req.Context.RequestID = requestID

	resp := c.client.JoinedTasks(ctx1, req)
	if resp.Message != "" {
		log.Println("ERROR：请求 JoinedTasks 失败，error：" + resp.Message)
		return nil
	}
	if resp.Data != nil {
		var m = resp.Data.(JoinedTasksResponse)
		return &m
	}
	return nil
}
