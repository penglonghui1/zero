// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
package okr

import (
	"context"

	jsoniter "github.com/json-iterator/go"
	"github.com/pengcainiao2/zero/rpcx/grpcbase"
)

var (
	GetOkrHandler func(ctx context.Context, req GetOkrRequest) grpcbase.Response
)

type Repository interface {
	GetOkr(ctx context.Context, request GetOkrRequest) grpcbase.Response
}

type Any struct {
	type_url string `json:"type_url,omitempty"`
	value    []byte `json:"value,omitempty"`
}

func (s Any) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetOkrRequest struct {
	Keyword string       `json:"keyword,omitempty"`
	Context *UserContext `json:"context,omitempty"`
}

func (s GetOkrRequest) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type GetOkrResponse struct {
	Name string `json:"name,omitempty"`
}

func (s GetOkrResponse) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type Response struct {
	Message string `json:"message,omitempty"`
	Total   int32  `json:"total,omitempty"`
	Data    *Any   `json:"data,omitempty"`
}

func (s Response) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type UserContext struct {
	UserID        string `json:"user_id,omitempty"`
	Platform      string `json:"platform,omitempty"`
	ClientVersion string `json:"client_version,omitempty"`
	Token         string `json:"token,omitempty"`
	ClientIP      string `json:"client_ip,omitempty"`
	RequestID     string `json:"request_id,omitempty"`
}

func (s UserContext) String() string {
	b, _ := jsoniter.Marshal(s)
	return string(b)
}

type service struct{}

// RpcContextFromHeader 从 httprouter.Context转换为grpc中所需的用户上下文
func RpcContextFromHeader(header string) *UserContext {
	var ctx *UserContext
	_ = jsoniter.UnmarshalFromString(header, ctx)
	return ctx
}

// NewService 新建okr的grpc服务
func NewService() Repository {
	return service{}
}

func (s service) GetOkr(ctx context.Context, req GetOkrRequest) grpcbase.Response {
	if GetOkrHandler != nil {
		if req.Context == nil {
			panic("grpc context is nil and requestID must be set")
		}
		return grpcbase.RPCServerSideLogic("/pb.okr/GetOkr", req.Context.RequestID, req, func(ctx context.Context, req interface{}) grpcbase.Response {
			return GetOkrHandler(ctx, req.(GetOkrRequest))
		})
	}
	return grpcbase.NotImplErrorResponse
}
