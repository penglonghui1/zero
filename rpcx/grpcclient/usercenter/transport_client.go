// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
//

package usercenter

import (
	"context"
	"errors"

	"github.com/pengcainiao2/zero/rpcx/grpcbase"
	pb "github.com/pengcainiao2/zero/rpcx/protos"
)

func encodeGetUserRequest(ctx context.Context, req interface{}) (request interface{}, err error) {
	r := req.(GetUserRequest)
	var xcontext *pb.UserContext
	if r.Context != nil {
		xcontext = &pb.UserContext{
			UserID:        r.Context.UserID,
			Platform:      r.Context.Platform,
			ClientVersion: r.Context.ClientVersion,
			Token:         r.Context.Token,
			ClientIP:      r.Context.ClientIP,
			RequestID:     r.Context.RequestID,
		}
	}
	return &pb.GetUserRequest{
		Keyword: r.Keyword,
		Context: xcontext,
	}, nil
}

func decodeGetUserResponse(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message != "" {
		var err = errors.New(r.Message)
		return nil, err
	}
	//在所有类型中匹配名称相同的消息名称
	var pbresp pb.GetUserResponse
	if err := r.Data.UnmarshalTo(&pbresp); err != nil {
		return nil, err
	}

	return grpcbase.Response{
		Data: GetUserResponse{
			name: pbresp.name,
		},
	}, nil
}
