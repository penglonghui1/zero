// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
// {{.Now}}

{{- $packageName :=LowerCase .ServiceName}}
package {{ $packageName}}

import (
	"context"
	"errors"
	"log"

	"github.com/pengcainiao/zero/rpcx/grpcbase"
)

//GrpcClient grpc客户端，各服务无需重复开发客户端。
// 如果对response有特殊处理，请在该文件夹下新增 response.go 处理后续逻辑
type GrpcClient struct {
	client Repository
}

//NewClient {{LowerCase .ServiceName}} GRPC客户端实例
func NewClient() GrpcClient {
	c, err := grpcbase.DialClient(grpcbase.ServerAddr(grpcbase.{{ .ServiceName}}SVC))
	if err != nil {
		log.Fatal(err)
	}
	client := c.(Repository)
	return GrpcClient{client}
}

{{- $allMessageStructs := .MessageStructs}}
{{- range .Methods}}
    {{- $rpcMethod :=.RpcMethodName}}
    {{- $paramsName := .Input.MessageStructName}}
    {{- $realResponseStructName := GetResponseName .RpcMethodName}}

{{- range $key,$value := $allMessageStructs}}
    {{- if eq $key $realResponseStructName}}
    {{- SetGlobalStore $realResponseStructName "true"}}
        // Handle{{ $rpcMethod}} 客户端处理逻辑
        func (c *GrpcClient) Handle{{ $rpcMethod}}(ctx context.Context, req {{$paramsName}}) *{{$realResponseStructName}} {
            if req.Context ==nil{
                panic("grpc context is nil and requestID must be set")
            }
            ctx1, span, requestID := grpcbase.NewTraceSpanFromRequestID("client","/pb.{{ $packageName}}/{{ $rpcMethod}}", req.Context.RequestID)
            defer span.End()


		    span.SetAttributes(attribute.String("message.id", req.Context.RequestID))
		    span.SetAttributes(attribute.String("user.id", req.Context.UserID))

	        span.AddEvent("request", trace.WithAttributes(attribute.String("message.data", req.String())))
            req.Context.RequestID = requestID

            resp := c.client.{{ $rpcMethod}}(ctx1, req)
            if resp.Message != "" {
                log.Println("ERROR：请求 {{ $rpcMethod}} 失败，error："+resp.Message)
            	return nil
            }
            if resp.Data != nil {
            	var m= resp.Data.({{$realResponseStructName}})
            	return &m
            }
            return nil
        }
	{{- end}}
{{- end}}

	{{ if ne (GetGlobalStore $realResponseStructName) "true" }}
	// Handle{{ $rpcMethod}} 客户端处理逻辑
      func (c *GrpcClient) Handle{{ $rpcMethod}}(ctx context.Context, req {{$paramsName}}) (error) {
          resp := c.client.{{ $rpcMethod}}(ctx, req)
          if resp.Message != "" {
          	return errors.New(resp.Message)
          }
          return  nil
      }
    {{- end}}

{{- end}}
