// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
// {{.Now}}

package {{LowerCase .ServiceName}}
{{- $packageName :=LowerCase .ServiceName}}

import (
	"context"
	"errors"
	"github.com/golang/protobuf/ptypes"
	"github.com/pengcainiao/zero/rpcx/grpcbase"
	pb "github.com/pengcainiao/zero/rpcx/protos"
)



{{$allMessageStructs := .MessageStructs}}
{{- range .Methods}}

{{- $rpcMethod :=.RpcMethodName}}
func encode{{.RpcMethodName}}Request(ctx context.Context, req interface{}) (request interface{}, err error) {
{{- $inputMessageStruct := .Input}}
	r := req.({{.Input.MessageStructName}})

	{{- range $inputMessageStruct.Properties}}
        {{- if .IsArray}}
            {{- if IsNotNil .AliasOf}}
                //是复杂类型的数组
                {{- $result :=SnakelizeStr .PropertyName}}
                var x{{$result}} = make([]*pb.{{.AliasOf.MessageStructName}},0)
                {{$aliasStructName := .AliasOf.MessageStructName}}
                for _, v:= range r.{{.PropertyName}}{
                    x{{$result}} = append(x{{$result}}, &pb.{{.AliasOf.MessageStructName}}{
                        {{- range $key,$value := $allMessageStructs}}
                            {{- if eq $key  $aliasStructName}}
                                {{- range $value.Properties}}
                                    {{ .PropertyName}}:v.{{ .PropertyName}},
                                {{- end}}
                            {{- end}}
                        {{- end}}
                    })
                }
            {{- end}}
        {{- else if IsNotNil .AliasOf}}
            {{- $basePropertyName := .PropertyName}}
            var x{{SnakelizeStr .PropertyName}}  *pb.{{.AliasOf.MessageStructName}}
            if r.{{.PropertyName}} != nil{
                x{{SnakelizeStr .PropertyName}} = &pb.{{.AliasOf.MessageStructName}}{
                    {{- range  .AliasOf.Properties}}
                        {{- if IsEnumMessage .AliasOf}}
                        {{.PropertyName}}:pb.{{.AliasOf.MessageStructName}}(r.{{$basePropertyName}}.{{.PropertyName}}),
                        {{- else}}
                        {{.PropertyName}}:r.{{$basePropertyName}}.{{.PropertyName}},
                        {{- end}}
                    {{- end}}
                }
            }
        {{- end}}
    {{- end}}
	return &pb.{{.Input.MessageStructName}}{
            {{- range $inputMessageStruct.Properties}}
                {{- if IsNotNil .AliasOf}}
                		        {{- $basePropertyName := .PropertyName}}
                                {{ .PropertyName}}:x{{SnakelizeStr .PropertyName}},
                            {{- else}}
                                {{ .PropertyName}}:r.{{ .PropertyName}},
                            {{- end}}
            {{- end}}
    }, nil
}

func decode{{.RpcMethodName}}Response(ctx context.Context, resp interface{}) (response interface{}, err error) {
	r := resp.(*pb.Response)
	if r.Message !=""{
        var err  = errors.New(r.Message)
	    return nil, err
	}

    {{- $realResponseStructName := GetResponseName .RpcMethodName}}
    {{- $propertyValueMap := .Output}}
    //在所有类型中匹配名称相同的消息名称
    {{- range $key,$value := $allMessageStructs}}
        {{- if eq $key $realResponseStructName}}
        	var pbresp pb.{{GetResponseName $rpcMethod}}
            if err := r.Data.UnmarshalTo(&pbresp); err != nil {
            	return nil, err
            }
            {{- SetGlobalStore $realResponseStructName "true"}}
             {{- range $value.Properties}}
                 {{- if .IsArray}}
                    {{- if IsNotNil .AliasOf}}
                        //是复杂类型的数组
                        {{- $result :=StringContact (LowerCase .PropertyName)  "Array"}}
                        var {{$result}} = make([]*{{.AliasOf.MessageStructName}},0)
                        {{- $aliasStructName := .AliasOf.MessageStructName}}
                        for _,v := range pbresp.{{.PropertyName}}{
                            {{$result}} = append({{$result}},&{{.AliasOf.MessageStructName}}{
                                {{- range $key,$value := $allMessageStructs}}
                                        {{- if eq $key  $aliasStructName}}
                                            {{- range $value.Properties}}
                                                //判断字段是否为复杂类型
                                                {{- if IsNotNil .AliasOf}}
                                                    {{$aliasName := .PropertyName}}
                                                    {{ .PropertyName}}:&{{.AliasOf.MessageStructName}}{
                                                        {{- range  .AliasOf.Properties}}
                                                            {{.PropertyName}}:v.{{ $aliasName}}.{{.PropertyName}},
                                                        {{- end}}
                                                    },
                                                {{- else}}
                                                    {{ .PropertyName}}:v.{{ .PropertyName}},
                                                {{- end}}

                                            {{- end}}
                                        {{- end}}
                                {{- end}}
                            })
                        }
                        {{- $propertyValueMap.SetActualValue .PropertyName $result}}
                    {{- else}}
                        {{- $result :=StringContact "pbresp." .PropertyName}}
                        {{- $propertyValueMap.SetActualValue .PropertyName $result}}
                    {{- end}}
                 {{- else if IsNotNil .AliasOf}}
                    {{$aliasStructName := .AliasOf.MessageStructName}}
                    {{$aliasName := .PropertyName}}
                    var {{LowerCase .PropertyName}}Struct=&{{.AliasOf.MessageStructName}}{
                                    {{- range .AliasOf.Properties}}
                                       //判断字段是否为复杂类型2
                                       {{- if IsNotNil .AliasOf}}
                                           {{$alias1Name := .AliasOf.MessageStructName}}
                                           {{ .PropertyName}}:&{{.AliasOf.MessageStructName}}{
                                               {{- range  .AliasOf.Properties}}
                                                   {{.PropertyName}}:pbresp.{{$aliasName}}.{{$alias1Name}}.{{.PropertyName}},
                                               {{- end}}
                                           },
                                       {{- else}}
                                           //判断字段是否为复杂类型3
                                           {{ .PropertyName}}:pbresp.{{$aliasName}}.{{ .PropertyName}},
                                       {{- end}}

                                    {{- end}}
                    }
                    {{- $result :=StringContact (LowerCase .PropertyName)  "Struct"}}
                    {{- $propertyValueMap.SetActualValue .PropertyName $result}}
                 {{- else}}
                        {{- $result :=StringContact "pbresp." .PropertyName}}
                        {{- $propertyValueMap.SetActualValue .PropertyName $result}}
                 {{- end}}
             {{- end}}

             return grpcbase.Response{
                 Data:{{$realResponseStructName}}{
                  {{- range $key,$value := $propertyValueMap.ActualValueMap}}
                    {{$key}}:{{$value}},
                  {{- end}}
                 },
             },nil
        {{- end}}
    {{- end}}
    {{- if ne (GetGlobalStore $realResponseStructName) "true" }}
         return grpcbase.Response{
             Message: r.Message,
         }, nil
    {{- end}}
}

{{- end}}

