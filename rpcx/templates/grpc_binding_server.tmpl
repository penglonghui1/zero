// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
// {{.Now}}

package {{LowerCase .ServiceName}}

import (
	"context"
    "log"

	"github.com/pengcainiao/zero/rpcx/grpcbase"
	pb "github.com/pengcainiao/zero/rpcx/protos"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"
)
type serverBinding struct {
{{- range .Methods}}
	{{SnakelizeStr .RpcMethodName}} grpctransport.Handler
{{- end}}
}

{{- range .Methods}}
func (b *serverBinding) {{ .RpcMethodName}}(ctx context.Context, req *pb.{{ .Input.MessageStructName}}) (*pb.Response, error) {
	if ctx == nil {
    	ctx = context.Background()
		log.Println("GRPC：{{ .RpcMethodName}} receive request context is nil，trace span将无法生效")
    }
	_, response, err := b.{{SnakelizeStr .RpcMethodName}}.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return response.(*pb.Response), nil
}

{{- end}}


func (b *serverBinding) RegisterServer(srv *grpc.Server) error {
	pb.Register{{CamelizeStr .ServiceName}}Server(srv, b)
	return nil
}

func (b *serverBinding) GRPCHandler() map[string]grpctransport.Handler {
	return map[string]grpctransport.Handler{
	{{- range .Methods}}
    	"{{SnakelizeStr .RpcMethodName}}":b.{{SnakelizeStr .RpcMethodName}},
    {{- end}}
	}
}

func NewBinding(svc Repository) *serverBinding {
	return &serverBinding{
	    {{- range .Methods}}
        	{{SnakelizeStr .RpcMethodName}}:grpcbase.CreateGRPCServer(
                             			make{{.RpcMethodName}}Endpoint(svc),
                             			decode{{.RpcMethodName}}Request,
                             			encode{{.RpcMethodName}}Response,
                             		),
        {{- end}}
	}
}
