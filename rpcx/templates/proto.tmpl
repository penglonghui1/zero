// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
// {{.Now}}

{{- $packageName :=LowerCase .ServiceName}}
package {{ $packageName}}

import (
	"context"

	jsoniter "github.com/json-iterator/go"
	"github.com/pengcainiao/zero/rpcx/grpcbase"
)

var (
{{- range .Methods}}
	{{.RpcMethodName}}Handler func(ctx context.Context,req {{.Input.MessageStructName}}) grpcbase.Response
{{- end}}
)

type Repository interface {
{{- range .Methods}}
	{{.RpcMethodName}}(ctx context.Context,request {{.Input.MessageStructName}}) grpcbase.Response
{{- end}}
}

{{range $key,$value := .MessageStructs }}

{{- if IsEnumMessage $value}}
type {{$key}} int32

const(
    {{- range $ekey,$evalue := .EnumProperties}}
        {{$ekey}} {{$key}} ={{$evalue}}
    {{- end}}
)
{{- else}}
type {{$key}} struct{
    {{- range $value.Properties}}
        {{.PropertyName}} {{ .GoType}} `json:"{{SnakeCase .JsonTagName}},omitempty"`
    {{- end}}
}

func (s {{$key}}) String() string {
	b,_:=jsoniter.Marshal(s)
	return string(b)
}

{{- end}}
{{- end}}

type service struct{}

// RpcContextFromHeader 从 httprouter.Context转换为grpc中所需的用户上下文
func RpcContextFromHeader(header string) *UserContext {
	var ctx *UserContext
	_ = jsoniter.UnmarshalFromString(header, ctx)
	return ctx
}

//NewService 新建{{LowerCase .ServiceName}}的grpc服务
func NewService() Repository {
	return service{}
}

{{- range .Methods}}

func (s service) {{.RpcMethodName}}(ctx context.Context, req {{.Input.MessageStructName}}) grpcbase.Response {
	if {{.RpcMethodName}}Handler != nil {
	    if req.Context ==nil{
	        panic("grpc context is nil and requestID must be set")
	    }
	    return grpcbase.RPCServerSideLogic("/pb.{{ $packageName}}/{{.RpcMethodName}}", req.Context.RequestID,req, func(ctx context.Context, req interface{}) grpcbase.Response {
	        return {{.RpcMethodName}}Handler(ctx, req.({{.Input.MessageStructName}}))
        })
	}
	return grpcbase.NotImplErrorResponse
}
{{- end}}
