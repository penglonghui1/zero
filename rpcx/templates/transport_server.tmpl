// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
// {{.Now}}

package {{LowerCase .ServiceName}}
{{- $packageName :=LowerCase .ServiceName}}

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	stdproto "github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/any"
	"github.com/pengcainiao/zero/rpcx/grpcbase"
	pb "github.com/pengcainiao/zero/rpcx/protos"
)



{{- $allMessageStructs := .MessageStructs}}
{{- range .Methods}}

func make{{.RpcMethodName}}Endpoint(svc Repository) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		req := request.({{.Input.MessageStructName}})
		v := svc.{{.RpcMethodName}}(ctx, req)
		return v, nil
	}
}

{{- $rpcMethod :=.RpcMethodName}}
func decode{{.RpcMethodName}}Request(ctx context.Context, req interface{}) (interface{}, error) {
    r := req.(*pb.{{.Input.MessageStructName}})
	{{- range .Input.Properties}}
        {{- if .IsArray}}
            {{- if IsNotNil .AliasOf}}
                //是复杂类型的数组
                {{- $result :=SnakelizeStr .PropertyName}}
                var x{{$result}} = make([]*{{.AliasOf.MessageStructName}},0)
                {{$aliasStructName := .AliasOf.MessageStructName}}
                for _, v:= range r.{{.PropertyName}}{
                    x{{$result}} = append(x{{$result}}, &{{.AliasOf.MessageStructName}}{
                        {{- range $key,$value := $allMessageStructs}}
                            {{- if eq $key  $aliasStructName}}
                                {{- range $value.Properties}}
                                    {{ .PropertyName}}:v.{{ .PropertyName}},
                                {{- end}}
                            {{- end}}
                        {{- end}}
                    })
                }
            {{- end}}
        {{- else if IsNotNil .AliasOf}}
            {{- $basePropertyName := .PropertyName}}
                var x{{SnakelizeStr .PropertyName}}  *{{.AliasOf.MessageStructName}}
                if r.{{.PropertyName}} != nil{
                    x{{SnakelizeStr .PropertyName}} = &{{.AliasOf.MessageStructName}}{
                        {{- range  .AliasOf.Properties}}
                            {{- if IsEnumMessage .AliasOf}}
                            {{.PropertyName}}:{{.AliasOf.MessageStructName}}(r.{{$basePropertyName}}.{{.PropertyName}}),
                            {{- else}}
                            {{.PropertyName}}:r.{{$basePropertyName}}.{{.PropertyName}},
                            {{- end}}
                        {{- end}}
                    }
                }
        {{- end}}
    {{- end}}

	return {{.Input.MessageStructName}}{
            {{- range .Input.Properties}}
                {{- if IsNotNil .AliasOf}}
                		        {{- $basePropertyName := .PropertyName}}
                                {{ .PropertyName}}:x{{SnakelizeStr .PropertyName}},
                            {{- else}}
                                {{ .PropertyName}}:r.{{ .PropertyName}},
                            {{- end}}
            {{- end}}
    }, nil
}

func encode{{.RpcMethodName}}Response(ctx context.Context, req interface{}) (interface{}, error) {
	r := req.(grpcbase.Response)
	if r.Data == nil {
		return &pb.Response{
			Message: r.Message,
		}, nil
	}
	{{- $realResponseStructName := GetResponseName .RpcMethodName}}
	{{- $propertyValueMap := .Output}}
    //在所有类型中匹配名称相同的消息名称
    {{- range $key,$value := $allMessageStructs}}
        {{- if eq $key $realResponseStructName}}
	    resp := r.Data.({{$realResponseStructName}})
	    {{- SetGlobalStore $realResponseStructName "true"}}
             {{- range $value.Properties}}
                 {{- if .IsArray}}
                    {{- if IsNotNil .AliasOf}}
                        //是复杂类型的数组
                        {{- $result :=StringContact (LowerCase .PropertyName)  "Array"}}
                        var {{$result}} = make([]*pb.{{.AliasOf.MessageStructName}},0)
                        {{$aliasStructName := .AliasOf.MessageStructName}}
                        for _,v := range resp.{{.PropertyName}}{
                            {{$result}} = append({{$result}},&pb.{{.AliasOf.MessageStructName}}{
                                {{- range $key,$value := $allMessageStructs}}
                                        {{- if eq $key  $aliasStructName}}
                                            {{- range $value.Properties}}
                                                {{- if IsNotNil .AliasOf}}
                                                    {{$aliasName := .PropertyName}}
                                                    {{ .PropertyName}}:&pb.{{.AliasOf.MessageStructName}}{
                                                        {{- range  .AliasOf.Properties}}
                                                            {{.PropertyName}}:v.{{ $aliasName}}.{{.PropertyName}},
                                                        {{- end}}
                                                    },
                                                {{- else}}
                                                    {{ .PropertyName}}:v.{{ .PropertyName}},
                                                {{- end}}
                                            {{- end}}
                                        {{- end}}
                                {{- end}}
                            })
                        }
                        {{- $propertyValueMap.SetActualValue .PropertyName $result}}
                    {{- else}}
                        {{- $result :=StringContact "resp." .PropertyName}}
                        {{- $propertyValueMap.SetActualValue .PropertyName $result}}
                    {{- end}}
                 {{- else if IsNotNil .AliasOf}}
                    {{- $aliasStructName := .AliasOf.MessageStructName}}
                    {{$aliasName := .PropertyName}}
                    var {{LowerCase .PropertyName}}Struct=&pb.{{.AliasOf.MessageStructName}}{
                        {{- range $key,$value := $allMessageStructs}}
                                {{- if eq $key  $aliasStructName}}
                                    {{- range $value.Properties}}
                                        {{- if IsNotNil .AliasOf}}
                                            {{$alias1Name := .AliasOf.MessageStructName}}
                                            {{ .PropertyName}}:&pb.{{.AliasOf.MessageStructName}}{
                                               {{- range  .AliasOf.Properties}}
                                                   {{.PropertyName}}:resp.{{$aliasName}}.{{$alias1Name}}.{{.PropertyName}},
                                               {{- end}}
                                            },
                                        {{- else}}
                                        {{ .PropertyName}}:resp.{{$aliasName}}.{{ .PropertyName}},
                                        {{- end}}
                                    {{- end}}
                                {{- end}}
                        {{- end}}
                    }
                    {{- $result :=StringContact (LowerCase .PropertyName)  "Struct"}}
                    {{- $propertyValueMap.SetActualValue .PropertyName $result}}
                 {{- else}}
                        {{- $result :=StringContact "resp." .PropertyName}}
                        {{- $propertyValueMap.SetActualValue .PropertyName $result}}
                 {{- end}}
             {{- end}}
                 pbresp := &pb.{{$realResponseStructName}}{
             		{{- range $key,$value := $propertyValueMap.ActualValueMap}}
                          {{$key}}:{{$value}},
                     {{- end}}
             	}
                 b, err := stdproto.Marshal(pbresp)
                 if err != nil {
                 	return nil, err
                 }
                 anyData := &any.Any{
                 	Value:   b,
                 	TypeUrl: stdproto.MessageName(pbresp),
                 }
            return &pb.Response{
                Message: r.Message,
                Total:   int32(r.Total),
                Data : anyData ,
            }, nil

        {{- end}}
    {{- end}}
    {{- if ne (GetGlobalStore $realResponseStructName) "true" }}
    return &pb.Response{
        Message: r.Message,
        Total:   int32(r.Total),
    }, nil
    {{- end}}
}
{{- end}}



