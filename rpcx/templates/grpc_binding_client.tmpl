// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by grpc_generate_tools(grpcgengo) at
// {{.Now}}

package {{LowerCase .ServiceName}}

import (
	"context"
    "log"

	"github.com/pengcainiao/zero/rpcx/grpcbase"
	"github.com/go-kit/kit/endpoint"
	"google.golang.org/grpc"
)

func init() {
	grpcbase.RegisterClients(grpcbase.ServerAddr(grpcbase.{{ .ServiceName}}SVC), &clientBinding{})
}

type clientBinding struct {
{{- range .Methods}}
	{{SnakelizeStr .RpcMethodName}} endpoint.Endpoint
{{- end}}
}

{{- range .Methods}}
func (c *clientBinding) {{ .RpcMethodName}}(ctx context.Context, params {{ .Input.MessageStructName}}) grpcbase.Response {
	if ctx == nil{
	    ctx = context.Background()
        log.Println("GRPC：{{ .RpcMethodName}} request context is nil，trace span将无法生效")
	}
	response, err := c.{{SnakelizeStr .RpcMethodName}}(ctx, params)
	if err != nil {
		return grpcbase.Response{
			Message: err.Error(),
		}
	}
	r := response.(grpcbase.Response)
	return r
}
{{- end}}


func (c *clientBinding) GRPCClient(cc *grpc.ClientConn) interface{} {
	c.newClient(cc)
	return c
}

func (c *clientBinding) newClient(cc *grpc.ClientConn) {
{{$serviceName := .ServiceName}}

{{- range .Methods}}
	c.{{SnakelizeStr .RpcMethodName}} = grpcbase.CreateGRPCClientEndpoint(cc, "pb.{{$serviceName}}",
                       		"{{ .RpcMethodName}}",
                       		encode{{ .RpcMethodName}}Request,
                       		decode{{ .RpcMethodName}}Response)
{{- end}}
}
